{"version":3,"sources":["assets/img/fisdas-logo-min.png","contents/menu.js","components/navbar/navbar.jsx","components/hero/hero.jsx","components/menu-card/menu-card.jsx","components/menu/menu.jsx","contents/assests.js","components/footer/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","menu","name","icon","Navbar","menuInNavbar","menuList","menuArr","filter","includes","map","className","src","fisdasLogo","alt","React","Component","Hero","MenuCard","this","props","data","Template","socialMedia","Footer","socmedList","socmed","library","add","fab","faCoffee","faListOl","faBook","faPlay","faUsers","faCalendarMinus","faSitemap","faGlobe","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,6C,qTCA9BC,EAAO,CAAC,CACbC,KAAM,cACNC,KAAM,WAEV,CACID,KAAM,QACNC,KAAM,QAEV,CACID,KAAM,QACNC,KAAM,QAEV,CACID,KAAM,UACNC,KAAM,SAEV,CACID,KAAM,SACNC,KAAM,kBAEV,CACID,KAAM,aACNC,KAAM,YCICC,E,uKAjBP,IAAMC,EAAe,CAAC,QAAS,SAAU,SACnCC,EAAWC,EAAQC,QAAO,SAAAP,GAAI,OAAII,EAAaI,SAASR,EAAKC,SAAOQ,KAAI,SAAAT,GAAI,OAAI,8BAAOA,EAAKC,SAClG,OACI,6BAASS,UAAU,UACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKC,IAAYC,IAAI,iBAE9B,yBAAKH,UAAU,cACVL,S,GAZJS,IAAMC,WCQZC,G,6KARP,OACI,6BAASN,UAAU,QACf,yBAAKA,UAAU,cAAf,6BAAsD,6BAAtD,2B,GALGI,IAAMC,Y,qBCcVE,E,uKATP,OACI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAiBR,KAAMgB,KAAKC,MAAMC,KAAKlB,QAC7D,yBAAKQ,UAAU,aAAaQ,KAAKC,MAAMC,KAAKnB,W,GANrCa,IAAMC,WCgBdM,E,uKAXP,IAAMhB,EAAWC,EAAQG,KAAI,SAAAT,GAAI,OAAI,kBAAC,EAAD,CAAUoB,KAAMpB,OACrD,OACI,6BAASU,UAAU,QACf,yBAAKA,UAAU,aACVL,Q,GAPES,IAAMC,WCChBO,G,MAAc,CAAC,CACpBrB,KAAM,YACNC,KAAM,CAAC,MAAO,cAElB,CACID,KAAM,OACNC,KAAM,CAAC,MAAO,SAElB,CACID,KAAM,UACNC,KAAM,WC8BCqB,E,uKArCP,IAAMC,EAAaF,EAAYb,KAAI,SAAAgB,GAAM,OAAI,kBAAC,IAAD,CAAiBvB,KAAMuB,EAAOvB,UACrEG,EAAWC,EAAQG,KAAI,SAAAT,GAAI,OAAI,2BAAIA,EAAKC,SAC9C,OACI,4BAAQS,UAAU,UACd,yBAAKA,UAAU,aAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SAAf,4BAAgD,6BAAhD,qBACA,yBAAKA,UAAU,UACVc,IAIT,yBAAKd,UAAU,YACX,yBAAKA,UAAU,WACX,uBAAGA,UAAU,SAAb,WACA,uBAAGA,UAAU,WAAb,2HAMJ,yBAAKA,UAAU,WACX,uBAAGA,UAAU,SAAb,WACA,yBAAKA,UAAU,oBACVL,KAKb,yBAAKK,UAAU,WAAf,8B,GAjCCI,IAAMC,W,sBCa3BW,IAAQC,IAAIC,IACRC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,K,IAeWC,E,uKAXX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPUvB,IAAMC,WCnBJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f1e66b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fisdas-logo-min.e2467230.png\";","export const menu = [{\r\n        name: 'Tata tertib',\r\n        icon: 'list-ol'\r\n    },\r\n    {\r\n        name: 'Modul',\r\n        icon: 'book'\r\n    },\r\n    {\r\n        name: 'Video',\r\n        icon: 'play'\r\n    },\r\n    {\r\n        name: 'Asisten',\r\n        icon: 'users'\r\n    },\r\n    {\r\n        name: 'Jadwal',\r\n        icon: 'calendar-minus'\r\n    },\r\n    {\r\n        name: 'Organigram',\r\n        icon: 'sitemap'\r\n    }\r\n]","import React from 'react'\r\nimport './navbar.css'\r\n\r\nimport fisdasLogo from '../../assets/img/fisdas-logo-min.png'\r\nimport { menu as menuArr } from '../../contents/menu'\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    render() {\r\n        const menuInNavbar = ['Modul', 'Jadwal', 'Video']\r\n        const menuList = menuArr.filter(menu => menuInNavbar.includes(menu.name)).map(menu => <span>{menu.name}</span>)\r\n        return (\r\n            <section className=\"navbar\">\r\n                <div className=\"container\">\r\n                    <div className=\"logo\">\r\n                        <img src={fisdasLogo} alt=\"fisdas-logo\" />\r\n                    </div>\r\n                    <div className=\"navigation\">\r\n                        {menuList}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './hero.css'\r\n\r\nclass Hero extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"hero\">\r\n                <div className=\"main-title\">Laboratorium Fisika Dasar <br></br> Telkom University</div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hero","import React from 'react'\r\nimport './menu-card.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass MenuCard extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"menu-card\">\r\n                <div className=\"icon\"><FontAwesomeIcon icon={this.props.data.icon} /></div>\r\n                <div className=\"menu-name\">{this.props.data.name}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MenuCard","import React from 'react'\r\nimport './menu.css'\r\n\r\nimport MenuCard from '../menu-card/menu-card'\r\n\r\nimport { menu as menuArr } from '../../contents/menu'\r\n\r\nclass Template extends React.Component {\r\n\r\n    render() {\r\n        const menuList = menuArr.map(menu => <MenuCard data={menu} />)\r\n        return (\r\n            <section className=\"menu\">\r\n                <div className=\"container\">\r\n                    {menuList}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Template","export const images = {\r\n    img: {\r\n        fisdasLogo: {\r\n            dir: 'src/assets/img/fisdas-logo-min.png'\r\n        }\r\n    }\r\n}\r\n\r\nexport const socialMedia = [{\r\n        name: 'Instagram',\r\n        icon: ['fab', 'instagram']\r\n    },\r\n    {\r\n        name: 'Line',\r\n        icon: ['fab', 'line']\r\n    },\r\n    {\r\n        name: 'Website',\r\n        icon: 'globe'\r\n    },\r\n]","import React from 'react'\r\nimport './footer.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport { socialMedia } from '../../contents/assests'\r\nimport { menu as menuArr } from '../../contents/menu'\r\n\r\nclass Footer extends React.Component {\r\n\r\n    render() {\r\n        const socmedList = socialMedia.map(socmed => <FontAwesomeIcon icon={socmed.icon} />)\r\n        const menuList = menuArr.map(menu => <p>{menu.name}</p>)\r\n        return (\r\n            <footer className=\"footer\">\r\n                <div className=\"container\">\r\n\r\n                    <div className=\"section1\">\r\n                        <div className=\"title\">Laboratorium Fisika Dasar<br></br>Telkom University</div>\r\n                        <div className=\"socmed\">\r\n                            {socmedList}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"section2\">\r\n                        <div className=\"find-us\">\r\n                            <p className=\"title\">Find us</p>\r\n                            <p className=\"address\">\r\n                                Gedung P (Deli) lantai 3, Telkom University,\r\n                                Jl. Telekomunikasi No.1, Sukapura, Kec. Dayeuhkolot,\r\n                                Bandung, Jawa Barat.\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"explore\">\r\n                            <p className=\"title\">Explore</p>\r\n                            <div className=\"footer-menu-list\">\r\n                                {menuList}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"credits\">All rights reserved.</div>\r\n                </div>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport './App.css';\n\nimport Navbar from './components/navbar/navbar'\nimport Hero from './components/hero/hero'\nimport Menu from './components/menu/menu'\nimport Footer from './components/footer/footer'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport {\n  faCoffee\n  , faListOl\n  , faBook\n  , faPlay\n  , faUsers\n  , faCalendarMinus\n  , faSitemap\n  , faGlobe\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab\n  , faCoffee\n  , faListOl\n  , faBook\n  , faPlay\n  , faUsers\n  , faCalendarMinus\n  , faSitemap\n  , faGlobe)\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Hero />\n        <Menu />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}